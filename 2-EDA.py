# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1InIpvm77bdze7drsUMIacyem7IsAsFtL
"""

import pandas as pd
import numpy as np

df =  pd.read_csv('./archivofinal.csv')

df.isnull().sum()

"""Voy a proceder a limpiar los datos y corregir nulos para poder analizarlos correctamente"""

df = df.drop('Unnamed: 0',axis=1)

#Elimino esta columna ya que en mi caso no la usaria para un analisis

df = df.drop('description',axis=1)

#uso .strip para eliminar espacios vacios antes y despues de cada registro

df['country'] = df['country'].str.strip()

df['rating'] = df['rating'].str.strip()
df['director'] = df['director'].str.strip()

#si tengo title repetidos, con este comando relleno nulos con los titulos repetidos que si tenia el dato

df['director'] = df.groupby('title')['director'].bfill().ffill()

#lo mismo hago con cast, country y director

df['cast'] = df.groupby('title')['cast'].bfill().ffill()
df['country'] = df.groupby('title')['country'].bfill().ffill()
df['director'] = df.groupby('title')['director'].bfill().ffill()

#el campo rating posee muchos valores que no corresponden a esa categoria

df['rating'].unique()

# Los voy a reemplazar por nan y luego por not rated

df.loc[df['rating'].str.endswith(('min', 'season','seasons')), 'rating'] = np.nan
df['rating'].fillna('not rated', inplace=True)

#voy a unificar las diferentes maneras de clasificar las series y peliculas segun la asociación cinematográfica de Estados Unidos
#(g,pg,pg-13,r,nc-17)


df['rating'] = df['rating'].replace(['unrated', 'not_rate', 'ur','nr','tv-nr'], 'not rated')
df['rating'] = df['rating'].replace(['all', 'tv-y', 'tv-g','all_ages'], 'g')

df['rating'] = df['rating'].replace(['tv-y7', 'tv-pg', '7+','tv-y7-fv'], 'pg')
df['rating'] = df['rating'].replace(['13+', 'tv-14', '7+','tv-y7-fv'], 'pg-13')

df['rating'] = df['rating'].replace(['16+', '16', 'ages_16_'], 'r')
df['rating'] = df['rating'].replace(['18+', 'tv-ma', 'ages_18_'], 'nc-17')

df['rating'].unique()

df['type'].unique()

#elimino la columna duration type

df = df.drop('duration_type', axis=1)

#creo una funcion para crear una nueva columna duration type que copie la columna type que esta completa, sin nulos
#donde diga movie en duration type ingresa min, donde diga tv show en duration_type ingresa season

def get_duration_type(row):
    if row['type'] == 'movie':
        return 'min'
    elif row['type'] == 'tv show':
        return 'season'
    else:
        return None

#aplico la funcion creada al dataframe
df['duration_type'] = df.apply(get_duration_type, axis=1)

#elimino el campo date_added porque considero que no es importante para el analisis

df = df.drop('date_added', axis=1)

#creo promedios para duration_int

promedios_por_tipo = df.groupby('duration_type')['duration_int'].mean()

print(promedios_por_tipo.loc['min'])
print(promedios_por_tipo.loc['season'])

#reemplazo los valores faltantes de peliculas y series por la media de pelicula/serie
df.loc[df['duration_type'] == 'min', 'duration_int'] = df.loc[df['duration_type'] == 'min', 'duration_int'].fillna(94)
df.loc[df['duration_type'] == 'season', 'duration_int'] = df.loc[df['duration_type'] == 'season', 'duration_int'].fillna(2)

df['duration_int'] = df['duration_int'].astype(int)

df['date'] = pd.to_datetime(df['date'])

df.sample()

df.info()

import fastparquet

"""Ya tengo listo el dataset para poder realizar el trabajo de recomendacion de Machine Learnig"""

df.to_parquet('archivofinalsinnulos.parquet')

"""Ya con los datos acomodados y sin nulos los analizo usando Pandas Profiling"""

from pandas_profiling import ProfileReport

#limito el df para generar el reporte

n = 1000000
df_limited = df.sample(n)

profile = ProfileReport(df_limited, title="Informe de plataformas de streaming con scores de los usuarios")

import ipywidgets as widgets

profile