# -*- coding: utf-8 -*-
"""ProyectoStreaming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTLBU1iaYMyug0n7zPRbwT5h1ZXv5Vmg
"""

#Importo las librerias para leer archivos

import pandas as pd
import numpy as np

# Leo el primer CSV de amazon prime

Amazon = pd.read_csv('./MLOpsReviews/amazon_prime_titles.csv')

Amazon.head()

# creo la funcion que agrega la leta "a" de Amazon prime al inicio de una columna asignada

def add_a(x):
    return "a" + str(x)

# Aplico la funcion add_a en la columna show_id del dataframe amazon prime

Amazon['show_id'] = Amazon['show_id'].apply(add_a)

#relleno valores nulos de rating por 'g'
Amazon['rating'].fillna('g', inplace=True)

# cambio de formato de fecha, en este caso date_added

Amazon['date_added'] = pd.to_datetime(Amazon['date_added'], format='%B %d, %Y') 
Amazon['date_added'] = Amazon['date_added'].dt.strftime('%Y-%m-%d')

# cambio formato a datetime

Amazon['date_added'] = pd.to_datetime(Amazon['date_added'])

# paso todos los campos a minuscula

Amazon = Amazon.applymap(lambda x: x.lower() if type(x) == str else x)

# divido el campo "duration" en duration_int y duration_type. El primero será un integer y el segundo un string indicando la unidad de medición de duración: min (minutos) o season (temporadas)

Amazon[['duration_int', 'duration_type']] = Amazon['duration'].str.split(expand=True)
Amazon['duration_int'] = Amazon['duration_int'].astype(int)

# elimino el campo duration

Amazon = Amazon.drop(columns='duration')

# agrego el campo platform para indicar la platafomra

Amazon['platform'] = 'amazon'

#leo el archivo disney

Disney = pd.read_csv('./MLOpsReviews/disney_plus_titles.csv')

Disney.head()

Disney.head()

# creo la funcion que agrega la leta "d" de Disney plus al inicio de una columna asignada

def add_d(x):
    return "d" + str(x)

# Aplico la funcion add_d en la columna show_id del dataframe Disney Plus
Disney['show_id'] = Disney['show_id'].apply(add_d)

#relleno valores nulos de rating por 'g'
Disney['rating'].fillna('g', inplace=True)

# cambio de formato de fecha, en este caso date_added

Disney['date_added'] = pd.to_datetime(Disney['date_added'], format='%B %d, %Y') 
Disney['date_added'] = Disney['date_added'].dt.strftime('%Y-%m-%d')

# cambio formato a datetime

Disney['date_added'] = pd.to_datetime(Disney['date_added'])

#paso todos los valores a minuscula

Disney = Disney.applymap(lambda x: x.lower() if type(x) == str else x)

# divido el campo "duration" en duration_int y duration_type. El primero será un integer y el segundo un string indicando la unidad de medición de duración: min (minutos) o season (temporadas)

Disney[['duration_int', 'duration_type']] = Disney['duration'].str.split(expand=True)
Disney['duration_int'] = Disney['duration_int'].astype(int)

# elimino el campo duration

Disney = Disney.drop(columns='duration')

Disney['platform'] = 'disney'

#leo el archivo Hulu

Hulu = pd.read_csv('./MLOpsReviews/hulu_titles.csv')

Hulu.head()

# creo la funcion que agrega la leta "h" de Hulu al inicio de una columna asignada

def add_h(x):
    return "h" + str(x)

# Aplico la funcion add_d en la columna show_id del dataframe Hulu
Hulu['show_id'] = Hulu['show_id'].apply(add_h)

#relleno valores nulos de rating por 'g'
Hulu['rating'].fillna('g', inplace=True)

# cambio de formato de fecha, en este caso date_added

Hulu['date_added'] = pd.to_datetime(Hulu['date_added'], format='%B %d, %Y') 
Hulu['date_added'] = Hulu['date_added'].dt.strftime('%Y-%m-%d')

# cambio formato a datetime

Hulu['date_added'] = pd.to_datetime(Hulu['date_added'])

#paso todo los campos a minuscula

Hulu = Hulu.applymap(lambda x: x.lower() if type(x) == str else x)

def split_duration(duration):
    if pd.isna(duration):
        return duration, duration
    value, unit = duration.split(" ")
    return int(value), unit

Hulu[['duration_int', 'duration_type']] = Hulu['duration'].apply(split_duration).apply(pd.Series)

# Reemplaza los valores nulos con 0
Hulu['duration_int'] = Hulu['duration_int'].fillna(0)

# Redondea los valores a un entero
Hulu['duration_int'] = Hulu['duration_int'].apply(lambda x: int(round(x)))

# Cambia el tipo de datos a int
Hulu['duration_int'] = Hulu['duration_int'].astype(int)

Hulu = Hulu.drop(columns='duration')

#vuelvo a reemplazar los valores 0 por Nan

Hulu['duration_int'] = np.where(Hulu['duration_int'] == 0, np.nan, Hulu['duration_int'])

Hulu['platform'] = 'hulu'

#leo el archivo Netflix

Netflix = pd.read_csv('./MLOpsReviews/netflix_titles.csv')

Netflix.head()

# creo la funcion que agrega la leta "h" de Hulu al inicio de una columna asignada

def add_n(x):
    return "n" + str(x)

# Aplico la funcion add_n en la columna show_id del dataframe Netflix
Netflix['show_id'] = Netflix['show_id'].apply(add_n)

#relleno valores nulos de rating por 'g'
Netflix['rating'].fillna('g', inplace=True)

#aplico funcion strip sobre el campo para eliminar espacios vacios al comienzo y final de cada registro

Netflix['date_added'] = Netflix['date_added'].str.strip()

# cambio de formato de fecha, en este caso date_added

Netflix['date_added'] = pd.to_datetime(Netflix['date_added'], format='%B %d, %Y') 
Netflix['date_added'] = Netflix['date_added'].dt.strftime('%Y-%m-%d')

# cambio formato a datetime

Netflix['date_added'] = pd.to_datetime(Netflix['date_added'])

#paso todo los campos a minuscula

Netflix = Netflix.applymap(lambda x: x.lower() if type(x) == str else x)

Netflix[['duration_int', 'duration_type']] = Netflix['duration'].apply(split_duration).apply(pd.Series)

# Reemplaza los valores nulos con 0
Netflix['duration_int'] = Netflix['duration_int'].fillna(0)

# Redondea los valores a un entero
Netflix['duration_int'] = Netflix['duration_int'].apply(lambda x: int(round(x)))

# Cambia el tipo de datos a int
Netflix['duration_int'] = Netflix['duration_int'].astype(int)

Netflix['platform'] = 'netflix'

peliculasyseries = pd.concat([Amazon,Disney,Hulu,Netflix],axis=0)

"""--- Hasta aqui ya estarian listos los dataset _titles con las modificaciones requeridas ---"""

# creo variables de cada dataset de la carpeta ratings

ratings1 = pd.read_csv('./MLOpsReviews/ratings/1.csv')
ratings2 = pd.read_csv('./MLOpsReviews/ratings/2.csv')
ratings3 = pd.read_csv('./MLOpsReviews/ratings/3.csv')
ratings4 = pd.read_csv('./MLOpsReviews/ratings/4.csv')
ratings5 = pd.read_csv('./MLOpsReviews/ratings/5.csv')
ratings6 = pd.read_csv('./MLOpsReviews/ratings/6.csv')
ratings7 = pd.read_csv('./MLOpsReviews/ratings/7.csv')
ratings8 = pd.read_csv('./MLOpsReviews/ratings/8.csv')

# concateno todos los DF para crear uno solo

ratings = pd.concat([ratings1,ratings2,ratings3,ratings4,ratings5,ratings6,ratings7,ratings8],axis=0)

ratings.head()

# cambio el fotmato de fecha de timestamp al formato solicitado

ratings['date'] = pd.to_datetime(ratings['timestamp'], unit='s')

# me quedo solo con la parte de la fecha del campo date

ratings['date'] = ratings['date'].dt.date

#elimino el campo timestamp

ratings =ratings.drop(columns='timestamp')

#creo el campo score en donde promedio los ratings de cada movieId

ratings['score_mean'] = ratings.groupby('movieId')['rating'].transform('mean').round(2)

ratings.head()

scores = ratings.rename(columns={'movieId': 'show_id','rating':'score'})

scores.head()

peliculasyseries= peliculasyseries.drop(columns='duration')

scores_score_mean =  scores.drop_duplicates(subset=['show_id'])

scores_score_mean = scores_score_mean[['show_id','score_mean']]

df_merge = pd.merge(peliculasyseries, scores_score_mean, on='show_id', how='left')

df_merge.to_csv('./peliculasyseriesconscore.csv')

peliculasyseries.info()

# Con esto creo el csv 'peliculasyseriesconscore.csv' con el cual voy a trabajar las funciones de las API